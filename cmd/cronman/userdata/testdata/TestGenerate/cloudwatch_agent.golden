Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config
cloud_final_modules:
- [scripts-user, always]

--//
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata.txt"

#!/bin/bash

exitcode=0
green="\e[32m"
red="\e[31m"
rustpmlogdir="/home/rustserver"
rustpmlog="/home/rustserver/rustpm.log"
steamcmddir="/usr/bin/steamcmd"

fn_script_log_fatal(){
  if [ -d "${rustpmlogdir}" ]; then
    echo -e "$(date '+%b %d %H:%M:%S.%3N'): FATAL: ${1}" >> "${rustpmlog}"
  fi
  exitcode=1
}
fn_script_log_error(){
  if [ -d "${rustpmlogdir}" ]; then
    echo -e "$(date '+%b %d %H:%M:%S.%3N'): ERROR: ${1}" >> "${rustpmlog}"
  fi
  exitcode=2
}
fn_script_log_pass(){
  if [ -d "${rustpmlogdir}" ]; then
    echo -e "$(date '+%b %d %H:%M:%S.%3N'): PASS: ${1}" >> "${rustpmlog}"
  fi
  exitcode=0
}
fn_sleep_time(){
  sleep "0.5"
}
fn_print_failure_nl(){
  echo -e "${red}Failure! $*"
  fn_sleep_time
}
fn_print_error2_nl(){
  echo -e "${red}Error! $*"
  fn_sleep_time
}
fn_print_complete_nl(){
  echo -e "${green}Complete! $*"
  fn_sleep_time
}
fn_dl_steamcmd(){
  if [ -d "${steamcmddir}" ]; then
    cd "${steamcmddir}" || exit
  fi

  # To do error checking for SteamCMD the output of steamcmd will be saved to a log.
  steamcmdlog="${rustpmlogdir}/steamcmd.log"

  # clear previous steamcmd log
  if [ -f "${steamcmdlog}" ]; then
    rm -f "${steamcmdlog:?}"
  fi

  counter=0
  while [ "${counter}" == "0" ]||[ "${exitcode}" != "0" ]; do
    counter=$((counter+1))
    # Select SteamCMD parameters
    # If GoldSrc (appid 90) servers. GoldSrc (appid 90) require extra commands.
    # All other servers.
    su -c  "steamcmd +login anonymous +force_install_dir /home/rustserver +app_update 258550 validate +quit | uniq > \"${steamcmdlog}\"" - rustserver

      # Error checking for SteamCMD. Some errors will loop to try again and some will just exit.
      # Check also if we have more errors than retries to be sure that we do not loop to many times and error out.
      exitcode=$?
      if [ -n "$(grep -i "Error!" "${steamcmdlog}" | tail -1)" ]&&[ "$(grep -ic "Error!" "${steamcmdlog}")" -ge "${counter}" ] ; then
        # Not enough space.
        if [ -n "$(grep "0x202" "${steamcmdlog}" | tail -1)" ]; then
          fn_print_failure_nl "Not enough disk space to download server files"
          fn_script_log_fatal "Not enough disk space to download server files"
          exit "${exitcode}"
        # Not enough space.
        elif [ -n "$(grep "0x212" "${steamcmdlog}" | tail -1)" ]; then
          fn_print_failure_nl "Not enough disk space to download server files"
          fn_script_log_fatal "Not enough disk space to download server files"
          exit "${exitcode}"
        # Need to purchase game.
        elif [ -n "$(grep "No subscription" "${steamcmdlog}" | tail -1)" ]; then
          fn_print_failure_nl "Steam account does not have a license for the required game"
          fn_script_log_fatal "Steam account does not have a license for the required game"
          exit "${exitcode}"
        # Update did not finish.
        elif [ -n "$(grep "0x402" "${steamcmdlog}" | tail -1)" ]||[ -n "$(grep "0x602" "${steamcmdlog}" | tail -1)" ]; then
          fn_print_error2_nl "Update required but not completed - check network"
          fn_script_log_error "Update required but not completed - check network"
        else
          fn_print_error2_nl "Unknown error occurred"
          fn_script_log_error "Unknown error occurred"
        fi
      elif [ "${exitcode}" != "0" ]; then
        fn_print_error2_nl "Exit code: ${exitcode}"
        fn_script_log_error "Exit code: ${exitcode}"
      else
        fn_print_complete_nl
        fn_script_log_pass
      fi

      if [ "${counter}" -gt "10" ]; then
        fn_print_failure_nl "Did not complete the download, too many retrys"
        fn_script_log_fatal "Did not complete the download, too many retrys"
        exit "${exitcode}"
      fi
  done
}

dpkg --add-architecture i386
apt-get -o DPkg::Lock::Timeout=300 update && \
apt-get -o DPkg::Lock::Timeout=300 upgrade -y && \
apt-get -o DPkg::Lock::Timeout=300 install -y \
  ca-certificates \
  lib32gcc-s1 \
  libsdl2-2.0-0:i386 \
  libsdl2-2.0-0 \
  sqlite3 \
  docker.io \
  unzip || exit 1

echo steamcmd steam/license note '' | debconf-set-selections
echo steamcmd steam/question select "I AGREE" | debconf-set-selections
apt-get install -y steamcmd
ln -s /usr/games/steamcmd /usr/bin/steamcmd

id -u rustserver &>/dev/null || adduser --disabled-password --gecos "" rustserver
fn_dl_steamcmd

su -c "curl --output Oxide.Rust-linux.zip -L https://github.com/OxideMod/Oxide.Rust/releases/latest/download/Oxide.Rust-linux.zip" - rustserver
su -c "unzip -o -d /home/rustserver/ Oxide.Rust-linux.zip" - rustserver

su -c "mkdir -p /home/rustserver/server/Rustpm East Main/cfg" - rustserver

if ! type amazon-cloudwatch-agent-ctl >/dev/null 2>&1
then
  wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
  dpkg -i -E ./amazon-cloudwatch-agent.deb
fi

echo '{"agent":{"metrics_collection_interval":60,"run_as_user":"root"},"metrics":{"aggregation_dimensions":[["InstanceId"]],"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}","ImageId":"${aws:ImageId}","InstanceId":"${aws:InstanceId}","InstanceType":"${aws:InstanceType}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["*"]},"diskio":{"measurement":["io_time","write_bytes","read_bytes","writes","reads"],"metrics_collection_interval":60,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"netstat":{"measurement":["tcp_established","tcp_time_wait"],"metrics_collection_interval":60},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}' > /opt/aws/amazon-cloudwatch-agent/bin/config.json

/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
  
export LD_LIBRARY_PATH=/home/rustserver:/home/rustserver/RustDedicated:{LD_LIBRARY_PATH};

echo "--- Starting Dedicated Server\n"
while true; do
  su -c "/home/rustserver/RustDedicated -batchmode -nographics -app.listenip \"0.0.0.0\" -app.port \"28082\" -rcon.ip \"0.0.0.0\" -rcon.password \"rustpm-rconpassword\" -rcon.port \"28016\" -rcon.web \"1\" -server.description \"Rustpm US East Main | Test Description\" -server.headerimage \"https://s3.amazonaws.com/rustpm.public.assets/banner.png\" -server.hostname \"rustpm-east-1\" -server.identity \"Rustpm East Main\" -server.ip \"0.0.0.0\" -server.maxplayers 100 -server.port \"28015\" -server.salt 321 -server.saveinterval 300 -server.seed 123 -server.tickrate 30 -server.worldsize 2000 -logfile" - rustserver
  echo "\n--- Restarting Dedicated Server\n"
done
--//
