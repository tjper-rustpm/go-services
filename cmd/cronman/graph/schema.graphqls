# https://gqlgen.com/getting-started/

# -----------------------------------------------------------------------------
# Enums
# -----------------------------------------------------------------------------
enum State {
  ACTIVE
  ARCHIVED
}

enum Order {
  TIME_TO_START_ASC
  TIME_TO_START_DESC
}

enum InstanceKind {
  STANDARD
}

enum BackgroundKind {
  AIRPORT
  BEACH_LIGHTHOUSE
  BIG_OIL_NIGHT
  FOREST
  ISLAND_LIGHTHOUSE
  JUNKYARD
  MOUNTAIN_NIGHT
  OXUM
  SEWER_NIGHT
  TOWER_NIGHT
}

enum EventKind {
  START
  STOP
}

enum IconKind {
  USER_GROUP
  MAP
  GLOBE
  CALENDAR_DAY
  CALENDAR_WEEK
  CALENDAR_EVENT
  GAMES
}

enum WipeDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum WipeFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum Region {
  US_EAST
  US_WEST
  EU_CENTRAL
}



# -----------------------------------------------------------------------------
# Queries
# -----------------------------------------------------------------------------
extend type Query {
  servers(input: ServersCriteria!): ServersResult!
}

input ServersCriteria {
  state: State! = ACTIVE,
}
type ServersResult {
  servers: [Server]!
}

union Server = LiveServer | DormantServer | ArchivedServer

type LiveServer {
  id: ID!
  definition: ServerDefinition!
  associationID: String!
  activePlayers: Int!
  queuedPlayers: Int!

  updatedAt: Time!
  createdAt: Time!
}

type DormantServer {
  id: ID!
  definition: ServerDefinition!

  startsAt: Time!
  updatedAt: Time!
  createdAt: Time!
}

type ArchivedServer {
  id: ID!
  definition: ServerDefinition!

  updatedAt: Time!
  createdAt: Time!
}

type ServerDefinition @key(fields: "id") {
  id: ID!
  name: String!
  instanceKind: InstanceKind!
  instanceID: String!
  allocationID: String!
  elasticIP: String!
  maxPlayers: Int!
  mapSize: Int!
  mapSeed: Int!
  mapSalt: Int!
  tickRate: Int!
  rconPassword: String!
  description: String!
  background: BackgroundKind!
  url: String!
  bannerURL: String!
  wipeDay: WipeDay!
  blueprintWipeFrequency: WipeFrequency!
  mapWipeFrequency: WipeFrequency!
  region: Region!

  schedule: [Event]!
  moderators: [Moderator]!
  tags: [Tag]!
}

type Event {
  id: ID!
  day: Int!
  hour: Int!
  kind: EventKind!
}

type Moderator {
  id: ID!
  steamID: String!
}

type Tag {
  id: ID!
  description: String!
  icon: IconKind!
  value: String!
}


# -----------------------------------------------------------------------------
# Mutations
# -----------------------------------------------------------------------------
extend type Mutation {
  createServer(input: NewServer!): CreateServerResult! @hasRole(role: ADMIN) @isAuthenticated
  archiveServer(id: ID!): ArchiveServerResult! @hasRole(role: ADMIN) @isAuthenticated
  updateServer(id: ID!, changes: ServerChanges!): UpdateServerResult! @hasRole(role: ADMIN) @isAuthenticated
  startServer(id: ID!): StartServerResult! @hasRole(role: ADMIN) @isAuthenticated
  stopServer(id: ID!): StopServerResult! @hasRole(role: ADMIN) @isAuthenticated

  addServerModerators(id: ID!, mods: [NewModerator!]!): AddServerModeratorsResult! @hasRole(role: ADMIN) @isAuthenticated
  removeServerModerators(id: ID!, moderatorIds: [ID!]!): RemoveServerModeratorsResult! @hasRole(role: ADMIN) @isAuthenticated

  addServerTags(id: ID!, tags: [NewTag!]!): AddServerTagsResult! @hasRole(role: ADMIN) @isAuthenticated
  removeServerTags(id: ID!, tagIds: [ID!]!): RemoveServerTagsResult! @hasRole(role: ADMIN) @isAuthenticated

  addServerEvents(id: ID!, events: [NewEvent!]!): AddServerEventsResult! @hasRole(role: ADMIN) @isAuthenticated
  removeServerEvents(id: ID!, eventIds: [ID!]!): RemoveServerEventsResult! @hasRole(role: ADMIN) @isAuthenticated
}

type CreateServerResult {
  server: DormantServer!
}
type ArchiveServerResult {
  server: ArchivedServer!
}
type UpdateServerResult {
  definition: ServerDefinition!
}
type StartServerResult {
  server: LiveServer!
}
type StopServerResult {
  server: DormantServer!
}
type AddServerModeratorsResult {
  definition: ServerDefinition!
}
type RemoveServerModeratorsResult {
  definition: ServerDefinition!
}
type AddServerTagsResult {
  definition: ServerDefinition!
}
type RemoveServerTagsResult {
  definition: ServerDefinition!
}
type AddServerEventsResult {
  definition: ServerDefinition!
}
type RemoveServerEventsResult {
  definition: ServerDefinition!
}

input NewServer {
  name: String!
  instanceKind: InstanceKind!
  maxPlayers: Int!
  mapSize: Int!
  mapSeed: Int!
  mapSalt: Int!
  tickRate: Int!
  rconPassword: String!
  description: String!
  url: String!
  background: BackgroundKind!
  bannerURL: String!
  wipeDay: WipeDay!
  blueprintWipeFrequency: WipeFrequency!
  mapWipeFrequency: WipeFrequency!
  region: Region!

  schedule: [NewEvent]!
  moderators: [NewModerator]!
  tags: [NewTag]!
}


input NewEvent {
  day: Int!
  hour: Int!
  kind: EventKind!
}

input NewModerator {
  steamID: String!
}

input NewTag {
  description: String!
  icon: IconKind!
  value: String!
}

input ServerChanges {
  name: String
  maxPlayers: Int
  mapSize: Int
  mapSeed: Int
  mapSalt: Int
  tickRate: Int
  rconPassword: String
  description: String
  url: String
  background: BackgroundKind
  bannerURL: String
  wipeDay: WipeDay
  blueprintWipeFrequency: WipeFrequency
  mapWipeFrequency: WipeFrequency
}