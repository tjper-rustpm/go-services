// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Server interface {
	IsServer()
}

type AddServerEventsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type AddServerModeratorsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type AddServerTagsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type ArchiveServerResult struct {
	Server *ArchivedServer `json:"server"`
}

type ArchivedServer struct {
	ID         string            `json:"id"`
	Definition *ServerDefinition `json:"definition"`
	UpdatedAt  time.Time         `json:"updatedAt"`
	CreatedAt  time.Time         `json:"createdAt"`
}

func (ArchivedServer) IsServer() {}

type CreateServerResult struct {
	Server *DormantServer `json:"server"`
}

type DormantServer struct {
	ID         string            `json:"id"`
	Definition *ServerDefinition `json:"definition"`
	StartsAt   time.Time         `json:"startsAt"`
	UpdatedAt  time.Time         `json:"updatedAt"`
	CreatedAt  time.Time         `json:"createdAt"`
}

func (DormantServer) IsServer() {}

type Event struct {
	ID   string    `json:"id"`
	Day  int       `json:"day"`
	Hour int       `json:"hour"`
	Kind EventKind `json:"kind"`
}

type LiveServer struct {
	ID            string            `json:"id"`
	Definition    *ServerDefinition `json:"definition"`
	AssociationID string            `json:"associationID"`
	ActivePlayers int               `json:"activePlayers"`
	QueuedPlayers int               `json:"queuedPlayers"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	CreatedAt     time.Time         `json:"createdAt"`
}

func (LiveServer) IsServer() {}

type Moderator struct {
	ID      string `json:"id"`
	SteamID string `json:"steamID"`
}

type NewEvent struct {
	Day  int       `json:"day"`
	Hour int       `json:"hour"`
	Kind EventKind `json:"kind"`
}

type NewModerator struct {
	SteamID string `json:"steamID"`
}

type NewServer struct {
	Name                   string          `json:"name"`
	InstanceKind           InstanceKind    `json:"instanceKind"`
	MaxPlayers             int             `json:"maxPlayers"`
	MapSize                int             `json:"mapSize"`
	MapSeed                int             `json:"mapSeed"`
	MapSalt                int             `json:"mapSalt"`
	TickRate               int             `json:"tickRate"`
	RconPassword           string          `json:"rconPassword"`
	Description            string          `json:"description"`
	URL                    string          `json:"url"`
	Background             BackgroundKind  `json:"background"`
	BannerURL              string          `json:"bannerURL"`
	WipeDay                WipeDay         `json:"wipeDay"`
	BlueprintWipeFrequency WipeFrequency   `json:"blueprintWipeFrequency"`
	MapWipeFrequency       WipeFrequency   `json:"mapWipeFrequency"`
	Region                 Region          `json:"region"`
	Schedule               []*NewEvent     `json:"schedule"`
	Moderators             []*NewModerator `json:"moderators"`
	Tags                   []*NewTag       `json:"tags"`
}

type NewTag struct {
	Description string   `json:"description"`
	Icon        IconKind `json:"icon"`
	Value       string   `json:"value"`
}

type RemoveServerEventsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type RemoveServerModeratorsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type RemoveServerTagsResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type ServerDefinition struct {
	ID                     string         `json:"id"`
	Name                   string         `json:"name"`
	InstanceKind           InstanceKind   `json:"instanceKind"`
	InstanceID             string         `json:"instanceID"`
	AllocationID           string         `json:"allocationID"`
	ElasticIP              string         `json:"elasticIP"`
	MaxPlayers             int            `json:"maxPlayers"`
	MapSize                int            `json:"mapSize"`
	MapSeed                int            `json:"mapSeed"`
	MapSalt                int            `json:"mapSalt"`
	TickRate               int            `json:"tickRate"`
	RconPassword           string         `json:"rconPassword"`
	Description            string         `json:"description"`
	Background             BackgroundKind `json:"background"`
	URL                    string         `json:"url"`
	BannerURL              string         `json:"bannerURL"`
	WipeDay                WipeDay        `json:"wipeDay"`
	BlueprintWipeFrequency WipeFrequency  `json:"blueprintWipeFrequency"`
	MapWipeFrequency       WipeFrequency  `json:"mapWipeFrequency"`
	Region                 Region         `json:"region"`
	Schedule               []*Event       `json:"schedule"`
	Moderators             []*Moderator   `json:"moderators"`
	Tags                   []*Tag         `json:"tags"`
}

func (ServerDefinition) IsEntity() {}

type ServersCriteria struct {
	State State `json:"state"`
}

type ServersResult struct {
	Servers []Server `json:"servers"`
}

type StartServerResult struct {
	Server *LiveServer `json:"server"`
}

type StopServerResult struct {
	Server *DormantServer `json:"server"`
}

type Tag struct {
	ID          string   `json:"id"`
	Description string   `json:"description"`
	Icon        IconKind `json:"icon"`
	Value       string   `json:"value"`
}

type UpdateServerResult struct {
	Definition *ServerDefinition `json:"definition"`
}

type BackgroundKind string

const (
	BackgroundKindAirport          BackgroundKind = "AIRPORT"
	BackgroundKindBeachLighthouse  BackgroundKind = "BEACH_LIGHTHOUSE"
	BackgroundKindBigOilNight      BackgroundKind = "BIG_OIL_NIGHT"
	BackgroundKindForest           BackgroundKind = "FOREST"
	BackgroundKindIslandLighthouse BackgroundKind = "ISLAND_LIGHTHOUSE"
	BackgroundKindJunkyard         BackgroundKind = "JUNKYARD"
	BackgroundKindMountainNight    BackgroundKind = "MOUNTAIN_NIGHT"
	BackgroundKindOxum             BackgroundKind = "OXUM"
	BackgroundKindSewerNight       BackgroundKind = "SEWER_NIGHT"
	BackgroundKindTowerNight       BackgroundKind = "TOWER_NIGHT"
)

var AllBackgroundKind = []BackgroundKind{
	BackgroundKindAirport,
	BackgroundKindBeachLighthouse,
	BackgroundKindBigOilNight,
	BackgroundKindForest,
	BackgroundKindIslandLighthouse,
	BackgroundKindJunkyard,
	BackgroundKindMountainNight,
	BackgroundKindOxum,
	BackgroundKindSewerNight,
	BackgroundKindTowerNight,
}

func (e BackgroundKind) IsValid() bool {
	switch e {
	case BackgroundKindAirport, BackgroundKindBeachLighthouse, BackgroundKindBigOilNight, BackgroundKindForest, BackgroundKindIslandLighthouse, BackgroundKindJunkyard, BackgroundKindMountainNight, BackgroundKindOxum, BackgroundKindSewerNight, BackgroundKindTowerNight:
		return true
	}
	return false
}

func (e BackgroundKind) String() string {
	return string(e)
}

func (e *BackgroundKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BackgroundKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BackgroundKind", str)
	}
	return nil
}

func (e BackgroundKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventKind string

const (
	EventKindStart EventKind = "START"
	EventKindStop  EventKind = "STOP"
)

var AllEventKind = []EventKind{
	EventKindStart,
	EventKindStop,
}

func (e EventKind) IsValid() bool {
	switch e {
	case EventKindStart, EventKindStop:
		return true
	}
	return false
}

func (e EventKind) String() string {
	return string(e)
}

func (e *EventKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventKind", str)
	}
	return nil
}

func (e EventKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IconKind string

const (
	IconKindUserGroup     IconKind = "USER_GROUP"
	IconKindMap           IconKind = "MAP"
	IconKindGlobe         IconKind = "GLOBE"
	IconKindCalendarDay   IconKind = "CALENDAR_DAY"
	IconKindCalendarWeek  IconKind = "CALENDAR_WEEK"
	IconKindCalendarEvent IconKind = "CALENDAR_EVENT"
	IconKindGames         IconKind = "GAMES"
)

var AllIconKind = []IconKind{
	IconKindUserGroup,
	IconKindMap,
	IconKindGlobe,
	IconKindCalendarDay,
	IconKindCalendarWeek,
	IconKindCalendarEvent,
	IconKindGames,
}

func (e IconKind) IsValid() bool {
	switch e {
	case IconKindUserGroup, IconKindMap, IconKindGlobe, IconKindCalendarDay, IconKindCalendarWeek, IconKindCalendarEvent, IconKindGames:
		return true
	}
	return false
}

func (e IconKind) String() string {
	return string(e)
}

func (e *IconKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IconKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IconKind", str)
	}
	return nil
}

func (e IconKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InstanceKind string

const (
	InstanceKindStandard InstanceKind = "STANDARD"
)

var AllInstanceKind = []InstanceKind{
	InstanceKindStandard,
}

func (e InstanceKind) IsValid() bool {
	switch e {
	case InstanceKindStandard:
		return true
	}
	return false
}

func (e InstanceKind) String() string {
	return string(e)
}

func (e *InstanceKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InstanceKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InstanceKind", str)
	}
	return nil
}

func (e InstanceKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderTimeToStartAsc  Order = "TIME_TO_START_ASC"
	OrderTimeToStartDesc Order = "TIME_TO_START_DESC"
)

var AllOrder = []Order{
	OrderTimeToStartAsc,
	OrderTimeToStartDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderTimeToStartAsc, OrderTimeToStartDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Region string

const (
	RegionUsEast    Region = "US_EAST"
	RegionUsWest    Region = "US_WEST"
	RegionEuCentral Region = "EU_CENTRAL"
)

var AllRegion = []Region{
	RegionUsEast,
	RegionUsWest,
	RegionEuCentral,
}

func (e Region) IsValid() bool {
	switch e {
	case RegionUsEast, RegionUsWest, RegionEuCentral:
		return true
	}
	return false
}

func (e Region) String() string {
	return string(e)
}

func (e *Region) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Region(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Region", str)
	}
	return nil
}

func (e Region) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type State string

const (
	StateActive   State = "ACTIVE"
	StateArchived State = "ARCHIVED"
)

var AllState = []State{
	StateActive,
	StateArchived,
}

func (e State) IsValid() bool {
	switch e {
	case StateActive, StateArchived:
		return true
	}
	return false
}

func (e State) String() string {
	return string(e)
}

func (e *State) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = State(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}

func (e State) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WipeDay string

const (
	WipeDaySunday    WipeDay = "SUNDAY"
	WipeDayMonday    WipeDay = "MONDAY"
	WipeDayTuesday   WipeDay = "TUESDAY"
	WipeDayWednesday WipeDay = "WEDNESDAY"
	WipeDayThursday  WipeDay = "THURSDAY"
	WipeDayFriday    WipeDay = "FRIDAY"
	WipeDaySaturday  WipeDay = "SATURDAY"
)

var AllWipeDay = []WipeDay{
	WipeDaySunday,
	WipeDayMonday,
	WipeDayTuesday,
	WipeDayWednesday,
	WipeDayThursday,
	WipeDayFriday,
	WipeDaySaturday,
}

func (e WipeDay) IsValid() bool {
	switch e {
	case WipeDaySunday, WipeDayMonday, WipeDayTuesday, WipeDayWednesday, WipeDayThursday, WipeDayFriday, WipeDaySaturday:
		return true
	}
	return false
}

func (e WipeDay) String() string {
	return string(e)
}

func (e *WipeDay) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WipeDay(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WipeDay", str)
	}
	return nil
}

func (e WipeDay) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WipeFrequency string

const (
	WipeFrequencyWeekly   WipeFrequency = "WEEKLY"
	WipeFrequencyBiweekly WipeFrequency = "BIWEEKLY"
	WipeFrequencyMonthly  WipeFrequency = "MONTHLY"
)

var AllWipeFrequency = []WipeFrequency{
	WipeFrequencyWeekly,
	WipeFrequencyBiweekly,
	WipeFrequencyMonthly,
}

func (e WipeFrequency) IsValid() bool {
	switch e {
	case WipeFrequencyWeekly, WipeFrequencyBiweekly, WipeFrequencyMonthly:
		return true
	}
	return false
}

func (e WipeFrequency) String() string {
	return string(e)
}

func (e *WipeFrequency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WipeFrequency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WipeFrequency", str)
	}
	return nil
}

func (e WipeFrequency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
